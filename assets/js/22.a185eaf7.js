(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{190:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git","aria-hidden":"true"}},[t._v("#")]),t._v(" GIT")]),t._v(" "),e("h2",{attrs:{id:"基础操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础操作")]),t._v(" "),e("h3",{attrs:{id:"拉取仓库文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拉取仓库文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 拉取仓库文件")]),t._v(" "),e("p",[t._v("http")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone https://gitee.com/TWaver/Space.git\n")])])]),e("p",[t._v("ssh")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone git@gitee.com:TWaver/Space.git\n")])])]),e("p",[t._v("拉取非master分支,例如dev分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone -b dev git@gitee.com:TWaver/Space.git\n")])])]),e("h3",{attrs:{id:"提交代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 提交代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .\ngit commit -m <备注本次合并的内容>\ngit push origin dev\n")])])]),e("h2",{attrs:{id:"基本命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本命令","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git config --list // 查看配置\ngit config --global user.name "lemon"\ngit config --global user.email "qwrtyp@live.cn"\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("关联远程仓库 git remote add origin git@github.com:用户名/仓库名.git\n本地仓库与远程仓库的绑定 git push --set-upstream origin master\n查看分支：git branch\n创建分支：git branch <name>\n切换分支：git checkout <name>\n创建+切换分支：git checkout -b <name>\n合并某分支到当前分支：git merge <name>\n删除分支：git branch -d <name>\n添加到一个暂存区 git add .\n将暂存区里的改动给提交到本地的版本库 git commit <备注本次合并的内容>\n推送分支：git push origin <name>\ngit remote -v显示更详细的信息\n")])])]),e("p",[t._v("创建 git 仓库:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git init\ntouch README.md\ngit add README.md\ngit commit -m "first commit"\ngit remote add origin https://gitee.com/emloxe/cis.git\ngit push -u origin master\n')])])]),e("p",[t._v("已有仓库?")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin https://gitee.com/emloxe/cis.git\ngit push -u origin master\n")])])]),e("h2",{attrs:{id:"tag打版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag打版本","aria-hidden":"true"}},[t._v("#")]),t._v(" tag打版本")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 命令格式\ngit tag -a 标签名 -m "附注信息"\n// 示例\ngit tag -a v1.0.0 -m "完成了文章a和文章b的撰写，耗费时间2h，感觉棒棒的！"\ngit push origin v1.0.0 // 推送\ngit push origin --tags // 推送本地所有标签\n\ngit tag -d test_tag　　　　　　　　//本地删除tag\ngit push origin :refs/tags/test_tag　　　　//本地tag删除了，再执行该句，删除线上tag\n')])])]),e("h2",{attrs:{id:"撤销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),e("h3",{attrs:{id:"git-放弃本地修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-放弃本地修改","aria-hidden":"true"}},[t._v("#")]),t._v(" git 放弃本地修改")]),t._v(" "),e("p",[t._v("如果在修改时发现修改错误，而要放弃本地修改时\n"),e("strong",[t._v("一，未使用 git add 缓存代码时")]),t._v("\n可以使用 "),e("code",[t._v("git checkout -- filepathname")]),t._v(" (比如： "),e("code",[t._v("git checkout -- readme.md")]),t._v("  ，不要忘记中间的 “--” ，不写就成了检出分支了！！)。放弃所有的文件修改可以使用 git checkout .  命令。\n此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件。因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。")]),t._v(" "),e("p",[e("strong",[t._v("二，已经使用了  git add 缓存了代码")]),t._v("\n可以使用  "),e("code",[t._v("git reset HEAD filepathname")]),t._v(" （比如： "),e("code",[t._v("git reset HEAD readme.md")]),t._v("）来放弃指定文件的缓存，放弃所以的缓存可以使用 "),e("code",[t._v("git reset HEAD .")]),t._v(" 命令。\n此命令用来清除 git  对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了如（一）所示的状态。继续用（一）中的操作，就可以放弃本地的修改。")]),t._v(" "),e("p",[e("strong",[t._v("三，已经用 git commit  提交了代码")]),t._v("\n可以使用 "),e("code",[t._v("git reset --hard HEAD^")]),t._v(" 来回退到上一次commit的状态。此命令可以用来回退到任意版本："),e("code",[t._v("git reset --hard <commitid>")]),t._v("\n你可以使用 git log 命令来查看git的提交历史。git log 的输出如下,之一这里可以看到第一行就是 commitid：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("commit cf0d692e982d8e372a07aaa6901c395eec73e356 (HEAD -> master)\nAuthor: toyflivver <2440659688@qq.com>\nDate: Thu Sep 28 14:07:14 2017 +0800\n多余的空行\n\ncommit 14aa4d7ad4ac6fba59b4b8261d32e478e8cc99ff\nAuthor: toyflivver <2440659688@qq.com>\nDate: Thu Sep 28 14:06:44 2017 +0800\n正常的代码\n\ncommit da3a95c84b6a92934ee30b6728e258bcda75f276\nAuthor: toyflivver <2440659688@qq.com>\nDate: Thu Sep 28 13:58:12 2017 +0800\nqbf\n\ncommit 267466352079296520320991a75321485224d6c6\nAuthor: toyflivver <2440659688@qq.com>\nDate: Thu Sep 28 13:40:09 2017 +0800\nqbf\n")])])]),e("p",[t._v("可以看出现在的状态在 commitid 为 cf0d692e982d8e372a07aaa6901c395eec73e356 的提交上（有 HEAD -> master 标记）。")]),t._v(" "),e("p",[e("strong",[t._v("四，已经push到远程仓库了")]),t._v("\n首先在本地对commit进行回滚，然后再强制性提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push origin master -f\n")])])]),e("h3",{attrs:{id:"修改commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改commit","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改commit")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit --amend -m '新的内容'  //修改刚刚的提交\n")])])]),e("h2",{attrs:{id:"git忽略规则和-gitignore规则不生效的解决办法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git忽略规则和-gitignore规则不生效的解决办法","aria-hidden":"true"}},[t._v("#")]),t._v(" Git忽略规则和.gitignore规则不生效的解决办法")]),t._v(" "),e("p",[t._v("Git忽略规则：\n在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如果没有这个文件，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：")]),t._v(" "),e("h1",{attrs:{id:"此为注释-–-将被-git-忽略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#此为注释-–-将被-git-忽略","aria-hidden":"true"}},[t._v("#")]),t._v(" 此为注释 – 将被 Git 忽略")]),t._v(" "),e("p",[e("em",[t._v(".sample    # 忽略所有 .sample 结尾的文件\n!lib.sample    # 但 lib.sample 除外\n/TODO    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/    # 忽略 build/ 目录下的所有文件\ndoc/")]),t._v(".txt   # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt")]),t._v(" "),e("p",[t._v(".gitignore规则不生效的解决办法")]),t._v(" "),e("p",[t._v("把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n")])])]),e("h2",{attrs:{id:"删除远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除远程分支")]),t._v(" "),e("p",[t._v("1.列出本地分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch\n")])])]),e("p",[t._v("2.删除本地分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -D BranchName\n")])])]),e("p",[t._v("其中-D也可以是--delete，如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch --delete BranchName\n")])])]),e("p",[t._v("3.删除本地的远程分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -r -D origin/BranchName\n")])])]),e("p",[t._v("4.远程删除git服务器上的分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push origin -d BranchName\n")])])]),e("p",[t._v("其中-d也可以是--delete，如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push origin --delete BranchName\n")])])]),e("h2",{attrs:{id:"当前本地仓库与远程指定分支合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当前本地仓库与远程指定分支合并","aria-hidden":"true"}},[t._v("#")]),t._v(" 当前本地仓库与远程指定分支合并")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull https://gitee.com/TWaver/CIS.git lemon20181104\n// 解决冲突，然后再提交\ngit push origin master\n")])])]),e("h2",{attrs:{id:"错误"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误","aria-hidden":"true"}},[t._v("#")]),t._v(" 错误")]),t._v(" "),e("h3",{attrs:{id:"error-your-local-changes-to-the-following-files-would-be-overwritten-by-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#error-your-local-changes-to-the-following-files-would-be-overwritten-by-merge","aria-hidden":"true"}},[t._v("#")]),t._v(" error:Your local changes to the following files would be overwritten by merge")]),t._v(" "),e("p",[t._v("意思是我新修改的代码的文件，将会被git服务器上的代码覆盖")]),t._v(" "),e("p",[t._v("方法1：如果你想保留刚才本地修改的代码，并把git服务器上的代码pull到本地（本地刚才修改的代码将会被暂时封存起来）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git stash\ngit pull origin master\ngit stash pop\n")])])]),e("p",[t._v("如此一来，服务器上的代码更新到了本地，而且你本地修改的代码也没有被覆盖，之后使用add，commit，push 命令即可更新本地代码到服务器了。")]),t._v(" "),e("p",[t._v("方法2、如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset --hard\n")])])]),e("h2",{attrs:{id:"其他配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他配置")]),t._v(" "),e("h3",{attrs:{id:"windows-上git大小写不敏感，可以设置如下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows-上git大小写不敏感，可以设置如下","aria-hidden":"true"}},[t._v("#")]),t._v(" windows 上git大小写不敏感，可以设置如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config core.ignorecase false\n")])])]),e("h3",{attrs:{id:"解决-windows-git-bash、linux-下的中文转码问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决-windows-git-bash、linux-下的中文转码问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决 Windows git Bash、Linux 下的中文转码问题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global core.quotepath false\n")])])]),e("h3",{attrs:{id:"配置换行符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置换行符","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置换行符")]),t._v(" "),e("p",[t._v("不同的操作系统对换行符的定义会有所不同，Unix或类Unix操作系统的换行符叫做LF，而windows系统的叫做CRLF，二者具有很大的区别\n")]),t._v(" "),e("blockquote",[e("p",[t._v("Unix系统里，每行结尾只有'<换行>'，即'n'；Windows系统里面，每行结尾是'<换行><回车>'\nNote:引自回车(CR)与换行(LF)， ‘r’和’n’的区别.")])]),t._v(" "),e("p",[t._v("这就是造成问题的根源——即如果你使用的是windows系统，而你的小伙伴用的是Mac的话，当你们使用git协同开发软件时，就会出现换行符不统一的问题。")]),t._v(" "),e("p",[t._v("git其实可以自己处理换行符不统一的问题，但是可能会产生意想不到的结果。因此，有必要进行相关的配置，我们通常有两种方案：")]),t._v(" "),e("p",[t._v("全局配置换行符\n针对某个仓库的局部配置")]),t._v(" "),e("h4",{attrs:{id:"全局配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global core.autocrlf input\n")])])]),e("blockquote",[e("p",[t._v("autocrlf =true 表示要求git在提交时将crlf转换为lf，而在检出时将crlf转换为lf。"),e("br"),t._v("\nautocrlf = false表示提交和检出代码时均不进行转换"),e("br"),t._v("\nautocrlf = input 表示在提交时将crlf转换为lf，而检出时不转换")])]),t._v(" "),e("h4",{attrs:{id:"单一仓库的换行符局部配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单一仓库的换行符局部配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 单一仓库的换行符局部配置")]),t._v(" "),e("p",[t._v("使用.gitattributes文件统一换行符。这种方法是针对某个仓库进行换行符的统一配置，即时你已经进行了全局配置。")]),t._v(" "),e("p",[t._v("另外，这个文件有点儿类似于.gitignore，不仅名字很类似，使用方式，编写语法也很像。这个文件必须位于仓库的根目录，可以像其他文件一样进行修改、提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将所有的纯文本文件末尾改成 Unix 风格的 lf\n* text eol=lf\n\n# 排除掉非纯文本文件\n*.jpg -text\n*.png -text\n*.pdf -text\n*.doc -text\n")])])]),e("p",[e("code",[t._v("text=auto")]),t._v("\n让git自行处理左边匹配的文件使用何种换行符格式，这是默认选项。")]),t._v(" "),e("p",[e("code",[t._v("text eol=crlf")]),t._v("\n对左边匹配的文件统一使用CRLF换行符格式，如果有文件中出现LF将会转换成CRLF。")]),t._v(" "),e("p",[e("code",[t._v("text eol=lf")]),t._v("\n对左边匹配的文件统一使用LF换行符格式，如果有文件中出现CRLF将会转换成LF。")])])},[],!1,null,null,null);a.default=r.exports}}]);